{"version":3,"sources":["components/Button.tsx","context/TimerContext.tsx","context/GameContext.tsx","context/RecordsContext.tsx","components/svg/StarSvg.tsx","components/svg/ClickSvg.tsx","components/svg/ReloadSvg.tsx","components/svg/TimeSvg.tsx","components/BgImage.tsx","components/Container.tsx","components/Layout.tsx","utils/TimeFormat.ts","components/Modal.tsx","components/Tab.tsx","components/ScoreClick.tsx","logics/useCurrentWidth.ts","components/TabsGroup.tsx","logics/useRecords.tsx","utils/generateUrlImages.ts","utils/generateCards.ts","components/Card.tsx","logics/useGame.tsx","components/OptionsSection.tsx","components/ScoreIndicator.tsx","components/Options.tsx","components/Game.tsx","logics/useScoreTimer.ts","components/Confettis.tsx","Main.tsx","index.tsx"],"names":["ETheme","TimerContext","createContext","seconds","setSeconds","undefined","minutes","setMinutes","TimerProvider","children","useState","Provider","value","LEVELS","THEMES","FLIPPED_RESET","ids","imgs","GameContext","clicks","setClicks","level","setLevel","theme","setTheme","isPlaying","setIsPlaying","flipped","setFlipped","found","setFound","isDone","setIsDone","GameProvider","RecordsContext","records","setRecords","RecordsProvider","StarSvg","props","xmlns","width","svgWidth","x","y","fill","fillColor","enableBackground","version","viewBox","xmlSpace","d","ClickSvg","height","svgHeight","bgFillColor","ReloadSvg","TimeSvg","BgImage","className","style","backgroundImage","imageUrl","Button","isActive","onClick","Container","centered","isCentered","centeredX","isCenteredX","maxWidth","Layout","layout","desktopLayout","col","React","Children","map","child","spacing","TimeFormat","displaySeconds","displayMinutes","numberTimeFormat","string","pad","length","Array","join","slice","Math","floor","Modal","hidden","useContext","themeParsed","snakeCase","time","isIcon","iconPosition","count","Tab","borderBottomStyle","toogleTab","ScoreClick","positionIcon","setPositionIcon","getWidth","window","innerWidth","document","documentElement","clientWidth","body","TabsGroup","noTabsonDesktop","isCard","contents","idActive","setIdActive","activeTabs","setActiveTabs","setWidth","useEffect","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","useCurrentWidth","navigation","idx","title","setActive","content","subcontent","returnedContent","isArray","Fragment","background","useRecords","compareRecords","current","newValue","generateUrlImages","Object","values","memoryImages","filter","image","generateCards","imageUrls","duplicatedImagesUrls","concat","shuffle","url","id","img","Card","clicked","draggable","disabled","src","useGame","deck","setDeck","clickCard","reset","checkPairs","cards","includes","bind","OptionsSection","desc","themeConfig","text","bg","ScoreIndicator","icon","record","Options","renderButton","buttons","active","label","LIGHT","toString","DARK","Game","secondsFormat","milliseconds","timerInterval","setInterval","clearInterval","useScoreTimer","Confettis","i","push","renderConfettis","Main","App","ReactDom","render","getElementById"],"mappings":"k3BAEYA,E,+CCOCC,EAAeC,wBAA+B,CACvDC,QAAS,EACTC,gBAAYC,EACZC,QAAS,EACTC,gBAAYF,IAGHG,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACbC,mBAAiB,GADJ,mBACpCP,EADoC,KAC3BC,EAD2B,OAEbM,mBAAiB,GAFJ,mBAEpCJ,EAFoC,KAE3BC,EAF2B,KAI3C,OACI,cAACN,EAAaU,SAAd,CAAuBC,MAAO,CAAET,UAASC,aAAYE,UAASC,cAA9D,SAA6EE,KClBxEI,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,IAC1BC,EAAS,CAClB,uBACA,aACA,cACA,UACA,SAESC,EAA8B,CAAEC,IAAK,GAAIC,KAAM,IAmB/CC,EAAchB,wBAA2B,CAClDiB,OAAQ,EACRC,eAAWf,EACXgB,MAAOR,EAAO,GACdS,cAAUjB,EACVkB,MAAOT,EAAO,GACdU,cAAUnB,EACVoB,WAAW,EACXC,kBAAcrB,EACdsB,QAASZ,EACTa,gBAAYvB,EACZwB,MAAO,GACPC,cAAUzB,EACV0B,QAAQ,EACRC,eAAW3B,IAGF4B,EAAe,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,EACdC,mBAAiB,GADH,mBACnCS,EADmC,KAC3BC,EAD2B,OAEhBV,mBAAiBG,EAAO,IAFR,mBAEnCQ,EAFmC,KAE5BC,EAF4B,OAGhBZ,mBAAiBI,EAAO,IAHR,mBAGnCS,EAHmC,KAG5BC,EAH4B,OAIRd,oBAAkB,GAJV,mBAInCe,EAJmC,KAIxBC,EAJwB,OAKZhB,mBAAuBK,GALX,mBAKnCY,EALmC,KAK1BC,EAL0B,OAMhBlB,mBAAmB,IANH,mBAMnCmB,EANmC,KAM5BC,EAN4B,OAOdpB,oBAAkB,GAPJ,mBAOnCqB,EAPmC,KAO3BC,EAP2B,KAS1C,OACI,cAACd,EAAYP,SAAb,CACIC,MAAO,CACHO,SACAC,YACAK,YACAC,eACAL,QACAC,SAAU,kBAAM,SAACD,GAAD,OAAmBC,EAASD,KAC5CE,QACAC,SAAU,kBAAM,SAACD,GAAD,OAAmBC,EAASD,KAC5CI,UACAC,aACAC,QACAC,WACAC,SACAC,aAfR,SAiBKvB,KC/DAyB,EAAiBhC,wBAA8B,CACxDiC,QAAS,GACTC,gBAAY/B,IAGHgC,EAAkB,SAAC,GAAkB,IAAhB5B,EAAe,EAAfA,SAAe,EACfC,mBAAS,IADM,mBACtCyB,EADsC,KAC7BC,EAD6B,KAG7C,OACI,cAACF,EAAevB,SAAhB,CAAyBC,MAAO,CAAEuB,UAASC,cAA3C,SACK3B,KCEE6B,G,MApBmB,SAACC,GAE/B,OACI,qBACAC,MAAM,6BACNC,MAAOF,EAAMG,SACbC,EAAE,IACFC,EAAE,IACFC,KAAMN,EAAMO,UAAYP,EAAMO,UAAY,UAC1CC,iBAAiB,wBACjBC,QAAQ,MACRC,QAAQ,oBACRC,SAAS,WATT,SAWA,sBAAMC,EAAE,sUCODC,EArBoB,SAACb,GAEhC,OAEI,sBACAC,MAAM,6BACNC,MAAOF,EAAMG,SACbW,OAAQd,EAAMe,WAAaf,EAAMe,UACjCT,KAAMN,EAAMgB,YAAchB,EAAMgB,YAAc,UAC9CN,QAAQ,YALR,UAOA,sBAAME,EAAE,0FACR,sBACIN,KAAMN,EAAMO,UAAYP,EAAMO,UAAY,OAC1CK,EAAE,2yBCKCK,EAnBqB,SAACjB,GAEjC,OACI,qBACAC,MAAM,6BACNG,EAAGJ,EAAMG,SACTE,EAAE,IACFG,iBAAiB,0BACjBC,QAAQ,MACRC,QAAQ,sBACRC,SAAS,WACTL,KAAMN,EAAMO,UAAYP,EAAMO,UAAY,UAR1C,SAUA,sBAAMK,EAAE,2WCYDM,EAzBmB,SAAClB,GAE/B,OAEI,sBACAC,MAAM,6BACNC,MAAOF,EAAMG,SACbW,OAAQd,EAAMe,WAAaf,EAAMe,UACjCT,KAAMN,EAAMgB,YAAchB,EAAMgB,YAAc,UAC9CN,QAAQ,YALR,UAOA,sBAAME,EAAE,0FACR,sBACIN,KAAMN,EAAMO,UAAYP,EAAMO,UAAY,OAC1CK,EAAE,wYAEN,sBACIN,KAAMN,EAAMO,UAAYP,EAAMO,UAAY,OAC1CK,EAAE,wOCLCO,EATwB,SAACnB,GACpC,OACI,qBAAKoB,UAAS,qCAAwCC,MAAO,CAACC,gBAAgB,OAAD,OAAStB,EAAMuB,SAAf,MAA7E,SACKvB,EAAM9B,a,SRRPT,K,YAAAA,E,eAAAA,M,KAWZ,IASe+D,EATuB,SAAC,GAAD,IAAGtD,EAAH,EAAGA,SAAUc,EAAb,EAAaA,MAAOyC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,QAA9B,OAClC,wBACIN,UAAS,kBAAapC,EAAb,YAAsByC,EAAW,UAAY,IAEtDC,QAASA,EAHb,SAIKxD,KSIMyD,EAb4B,SAAC3B,GAExC,IAAM4B,EAAW5B,EAAM6B,WAAa,UAAY,GAC1CC,EAAY9B,EAAM+B,YAAc,WAAa,GAEnD,OACI,yBAASX,UAAS,UAAKQ,EAAL,YAAiBE,GAAaT,MAAO,CAACW,SAAShC,EAAMgC,UAAvE,SACKhC,EAAM9B,YCMJ+D,EAbsB,SAACjC,GAElC,IAAMkC,EAASlC,EAAMmC,cAAgB,OAAS,GAE9C,OACI,yBAASf,UAAS,UAAKc,EAAL,iBAAoBlC,EAAMoC,IAA1B,UAAlB,SACKC,IAAMC,SAASC,IAAIvC,EAAM9B,UAAU,SAACsE,GACjC,OAAQ,yBAASpB,UAAWpB,EAAMyC,QAA1B,SAAoCD,U,OChB7C,SAASE,EAAW9E,GAC/B,IAAI+E,EACAC,EAEJ,SAASC,EAAiBC,EAAQC,EAAKC,GACnC,OAAQ,IAAIC,MAAMD,EAAS,GAAGE,KAAKH,GAAOD,GAAQK,OAAOH,GAW7D,OAPAL,EAAiB/E,EAA2B,IAD5CgF,EAAiBQ,KAAKC,MAAMzF,EAAU,KAIlCiF,EAAiBD,EAAgB,IAAK,GACtC,IACAC,EAAiBF,EAAgB,IAAK,GCA9C,IAgFeW,EAhFqB,SAAC,GAAyB,IAAvB5B,EAAsB,EAAtBA,QAAS6B,EAAa,EAAbA,OACpC3F,EAAY4F,qBAAW9F,GAAvBE,QACAgC,EAAY4D,qBAAW7D,GAAvBC,QAFiD,EAGxB4D,qBAAW7E,GAApCG,EAHiD,EAGjDA,MAAOE,EAH0C,EAG1CA,MAAOJ,EAHmC,EAGnCA,OAChB6E,EAAcC,oBAAU1E,GAE9B,OACI,sBACIuE,OAAQA,EACRnC,UAAS,UACLmC,EAAS,QAAU,QADd,qHAFb,UAKI,oBAAInC,UAAU,+BAAd,gCACCxB,EAAQd,IACLc,EAAQd,GAAO2E,IACf7E,GAAUgB,EAAQd,GAAO2E,GAAa7E,QAClC,sBAAMwC,UAAU,eAAhB,sCAKPxB,EAAQd,IACLc,EAAQd,GAAO2E,IACf7F,GAAWgC,EAAQd,GAAO2E,GAAaE,MACnC,sBAAMvC,UAAU,eAAhB,sCAIR,qBAAKA,UAAU,iDAAf,SACI,sBAAKA,UAAU,mCAAf,UACI,sBAAKA,UAAU,QAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,cAAC,EAAD,CAASjB,SAAS,SAClB,sBAAMiB,UAAU,qBAAhB,sBAEJ,sBAAMA,UAAU,uBAAhB,SACKsB,EAAW9E,KAEhB,qBAAKwD,UAAU,uBAAf,SACI,cAAC,EAAD,CACIwC,QAAM,EACNC,aAAa,OACbC,MACIlE,EAAQd,IACRc,EAAQd,GAAO2E,IACff,EAAW9C,EAAQd,GAAO2E,GAAaE,aAKvD,sBAAKvC,UAAU,QAAf,UACI,sBAAKA,UAAU,sBAAf,UACI,cAAC,EAAD,CAAUjB,SAAS,SACnB,sBAAMiB,UAAU,qBAAhB,sBAEJ,sBAAMA,UAAU,uBAAhB,SAAwCxC,IACxC,qBAAKwC,UAAU,uBAAf,SACI,cAAC,EAAD,CACIwC,QAAM,EACNC,aAAa,OACbC,MACIlE,EAAQd,IACRc,EAAQd,GAAO2E,IACf7D,EAAQd,GAAO2E,GAAa7E,mBAMpD,yBAASwC,UAAU,sDAAnB,SACI,wBACIA,UAAU,uFACVM,QAASA,EAFb,SAGI,mDC7CLqC,EAlCiB,SAAC/D,GA+B7B,OA7BQA,EAAMgE,kBAEF,oBAAI5C,UAAU,sEAAd,SACI,oBACIA,UAAS,UACLpB,EAAMyB,UAAYzB,EAAMyB,SAClB,oEACA,GAHD,uDAKTC,QAAS1B,EAAMiE,WAAajE,EAAMiE,UANtC,SAOKjE,EAAM9B,aAMf,oBAAIkD,UAAU,iHAAd,SACI,oBACIA,UAAS,UACLpB,EAAMyB,UAAYzB,EAAMyB,SAAW,0BAA4B,GAD1D,uDAGTC,QAAS1B,EAAMiE,WAAajE,EAAMiE,UAJtC,SAKKjE,EAAM9B,cCOhBgG,EA3B+B,SAAClE,GAAqD,IAAD,EAEvD7B,qBAFuD,mBAExFgG,EAFwF,KAE1EC,EAF0E,KAI/F,OAAQpE,EAAM6D,cAAgB7D,EAAM6D,cAChC,IAAK,QACDO,EAAgB,qBAOxB,OACI,sBAAKhD,UAAS,UAAK+C,EAAL,qDAAsEzC,QAAS1B,EAAM0B,SAAW1B,EAAM0B,QAApH,UACK1B,EAAM4D,QACP,qBAAKxC,UAAU,6BAAf,SACI,cAAC,EAAD,CAASjB,SAAS,WAGtB,qBAAKiB,UAAU,kCAAf,SACKpB,EAAM8D,Y,aC/BvB,IAAMO,EAAW,kBACbC,OAAOC,YACPC,SAASC,gBAAgBC,aACzBF,SAASG,KAAKD,aCgBlB,IA0FeE,EA1F6B,SAAC,GAKtC,IAJHC,EAIE,EAJFA,gBACAb,EAGE,EAHFA,kBACAc,EAEE,EAFFA,OACAC,EACE,EADFA,SACE,EAC8B5G,mBAAiB,GAD/C,mBACK6G,EADL,KACeC,EADf,OAEkC9G,oBAAkB,GAFpD,mBAEK+G,EAFL,KAEiBC,EAFjB,KAIEjF,EDvBO,WAA2B,MAEd/B,mBAASkG,KAFK,mBAEjCnE,EAFiC,KAE1BkF,EAF0B,KAyBtC,OAnBAC,qBAAU,WAEN,IAAIC,EACEC,EAAiB,WAEnBC,aAAaF,GAEbA,EAAYG,YAAW,kBAAML,EAASf,OAAa,MAMvD,OAHAC,OAAOoB,iBAAiB,SAAUH,GAG3B,WAEHjB,OAAOqB,oBAAoB,SAAUJ,MAE1C,IAEIrF,ECFK0F,GACZP,qBAAU,WACQF,EAAdjF,EAAQ,OACT,CAACA,IAEJ,IAEM2F,EAAad,EAASxC,KAAI,WAAYuD,GAAZ,IAAGC,EAAH,EAAGA,MAAH,OAC5B,cAAC,EAAD,CAEItE,SAAUuD,IAAac,EACvB9B,kBAAmBA,EACnBC,UAAW,kBAPD,SAAC6B,GAAD,OAAuBb,EAAYa,GAO5BE,CAAUF,IAJ/B,SAKI,sBAAM1E,UAAU,0BAAhB,SAA2C2E,KAJtCD,MAQPG,EAAUlB,EAASxC,KAAI,WAAiBuD,GAAS,IAAvBI,EAAsB,EAAtBA,WACxBC,EAAkBlD,MAAMmD,QAAQF,GAC9BA,EAAW3D,KAAI,WAAqBuD,GAArB,IAAGC,EAAH,EAAGA,MAAOE,EAAV,EAAUA,QAAV,OACX,eAAC,IAAMI,SAAP,WACKN,GACG,oBAAI3E,UAAU,sDAAd,SACK2E,IAGRE,IANgBH,MASzBI,EAEN,OAAIrB,GACIK,EAEI,qBAAe9D,UAAW,4BAA1B,SACK8E,GADKJ,GAiBd,qBAEI1E,UAAS,UACL4D,IAAac,EAAM,iBAAmB,WAH9C,SAKKK,GAJIL,MAUfQ,EAAaxB,EACb,iCACA,kBAEN,OACI,0BAAS1D,UAAS,UAAKkF,GAAvB,UACI,qBACIlF,UAAS,gBACL8D,EAAa,2BAA6B,gBADrC,KADb,SAIKW,IAEL,yBAASzE,UAAU,gCAAnB,SACK6E,Q,cC1CFM,EAzDI,WAAO,IAAD,EACW/C,qBAAW7D,GAAnCC,EADa,EACbA,QAASC,EADI,EACJA,WADI,EAEuB2D,qBAAW7E,GAA/CO,EAFa,EAEbA,UAAWJ,EAFE,EAEFA,MAAOE,EAFL,EAEKA,MAAOJ,EAFZ,EAEYA,OACzBhB,EAAY4F,qBAAW9F,GAAvBE,QAEF4I,EAAiB,SAACC,EAAiBC,GACrC,OAAmB,IAAZD,GAAkBC,EAAWD,GAAwB,IAAbC,EACzCA,EACAD,GA8CV,OA3CApB,qBAAU,WACN,IAAKnG,EAAW,CACZ,IAAMuE,EAAcC,oBAAU1E,GAE1BY,EAAQd,GACJc,EAAQd,GAAO2E,GACf5D,EAAW,2BACJD,GADG,kBAELd,EAFK,YAAC,eAGAc,EAAQd,IAHT,kBAID2E,EAAc,CACX7E,OAAQ4H,EACJ5G,EAAQd,GAAO2E,GAAa7E,OAC5BA,GAEJ+E,KAAM6C,EACF5G,EAAQd,GAAO2E,GAAaE,KAC5B/F,SAMhBiC,EAAW,2BACJD,GADG,kBAELd,EAFK,YAAC,eAGAc,EAAQd,IAHT,kBAID2E,EAAc,CACX7E,SACA+E,KAAM/F,QAMtBiC,EAAW,2BACJD,GADG,kBAELd,EAFK,eAEM2E,EAAc,CAAE7E,SAAQ+E,KAAM/F,UAIvD,CAACsB,IAEG,CAAEU,Y,QChDE+G,EATW,SAAC3H,EAAeF,GACtC,IAAM2E,EAAcC,oBAAU1E,GAG9B,OAF6B4H,OAAOC,OAAOC,EAAarD,IAGnDsD,QAAO,SAACC,EAAOlB,GAAR,OAAgBA,EAAMhH,EAAQ,KACrCyD,KAAI,SAACyE,GAAD,6BAA2BvD,EAA3B,YAA0CuD,OCSxCC,EAdO,SAACjI,EAAeF,GAClC,IAAMoI,EAAYP,EAAkB3H,EAAOF,GACrCqI,EAAuBD,EAAUE,OAAV,MAAAF,EAAS,YAAWA,IAEjD,OAAOG,kBACHF,EAAqB5E,KAAI,SAAC+E,EAAKxB,GAC3B,MAAO,CACHyB,GAAIzB,EACJ0B,IAAKF,QCYNG,G,MAdmB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAASpI,EAA0B,EAA1BA,MAAOoC,EAAmB,EAAnBA,QAAS8F,EAAU,EAAVA,IAC1D,OACI,wBACIpG,UAAS,gCAA2BsG,EAAU,aAAe,GAApD,YACLpI,EAAQ,SAAW,IAEvBqI,WAAW,EACXC,SAAUF,GAAWpI,EACrBoC,QAASA,EANb,SAOI,qBAAKmG,IAAKL,QCiFPM,EA5FC,WAAO,IAAD,EAcdtE,qBAAW7E,GAZXK,EAFc,EAEdA,MACAF,EAHc,EAGdA,MACAM,EAJc,EAIdA,QACAC,EALc,EAKdA,WACAT,EANc,EAMdA,OACAC,EAPc,EAOdA,UACAS,EARc,EAQdA,MACAC,EATc,EASdA,SACAL,EAVc,EAUdA,UACAC,EAXc,EAWdA,aACAK,EAZc,EAYdA,OACAC,EAbc,EAadA,UAEIG,EAAY2G,IAAZ3G,QACA/B,EAAe2F,qBAAW9F,GAA1BG,WAhBU,EAiBMM,mBAAkB8I,EAAcjI,EAAOF,IAjB7C,mBAiBXiJ,EAjBW,KAiBLC,EAjBK,KAmBZC,EAAY,SAACV,EAAYC,GAAuB,IAC1C/I,EAAcW,EAAdX,IAAKC,EAASU,EAATV,KAEE,IAAXE,GAAcO,GAAa,GAE3BV,EAAIuE,OAAS,GACb3D,EAAW,CAAEZ,IAAI,GAAD,mBAAMA,GAAN,CAAW8I,IAAK7I,KAAK,GAAD,mBAAMA,GAAN,CAAY8I,OAmBlDU,EAAQ,WACV7I,EAAWb,GACXe,EAAS,IACTV,EAAU,GACVY,GAAU,GACVN,GAAa,GACbtB,EAAW,GACXmK,EAAQf,EAAcjI,EAAOF,KA+BjC,OA5BAuG,qBAAU,WACNlG,GAAa,KACd,CAACK,IAEJ6F,qBAAU,WACqB,IAAvBjG,EAAQX,IAAIuE,QA9BD,WAAa,IACpBtE,EAASU,EAATV,KAEJA,EAAK,KAAOA,EAAK,IACjBa,EAAS,GAAD,mBAAKD,GAAL,CAAYZ,EAAK,MACzBW,EAAWb,IAEXiH,YAAW,WACPpG,EAAWb,KACZ,KAGPK,EAAUD,EAAS,GAmBfuJ,GAGA7I,EAAM0D,SAAW+E,EAAK/E,OAAS,GAC/BvD,GAAU,KAEf,CAACL,IAEJiG,oBAAU6C,EAAO,CAAClJ,EAAOF,IAclB,CACHsJ,MAbyBL,EAAKxF,KAC9B,gBAAGgF,EAAH,EAAGA,GAAIC,EAAP,EAAOA,IAAP,OACI,cAAC,EAAD,CAEIE,QAAStI,EAAQX,IAAI4J,SAASd,GAC9BjI,MAAOA,EAAM+I,SAASb,GACtB9F,QAASuG,EAAUK,KAAK,KAAMf,EAAIC,GAClCA,IAAKA,GAJAD,MAWb3I,SACAsJ,QACA1I,SACAI,UACAV,cChEOqJ,EAvBuC,SAAC,GAKhD,IAJHxC,EAIE,EAJFA,MACAyC,EAGE,EAHFA,KACAxJ,EAEE,EAFFA,MACAd,EACE,EADFA,SAEMuK,EAAc,CAChBC,KAAgB,UAAV1J,EAAoB,UAAY,QACtC2J,GAAc,UAAV3J,EAAoB,QAAU,iBAGtC,OACI,0BACIoC,UAAS,4BAAuBqH,EAAYE,GAAnC,kBAA+CF,EAAYC,MADxE,UAEI,6BAAK3C,IACJyC,GAAQ,qBAAKpH,UAAU,UAAf,SAA0BoH,IACnC,qBAAKpH,UAAU,gEAAf,SACKlD,QCHF0K,EAduC,SAAC,GAA6B,IAA3B7C,EAA0B,EAA1BA,MAAO8C,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAClE,OACI,sBAAK1H,UAAU,SAAf,UACI,sBAAKA,UAAU,6BAAf,UACKyH,EACD,oBAAIzH,UAAU,iBAAd,SAAgC2E,OAEpC,qBAAK3E,UAAU,uBAAf,SACI,cAAC,EAAD,CAAYwC,QAAM,EAACC,aAAa,OAAOC,MAAOgF,UC+D/CC,EApEW,WAAO,IAAD,EACiBvF,qBAAW7E,GAAhDG,EADoB,EACpBA,MAAOC,EADa,EACbA,SAAUC,EADG,EACHA,MAAOC,EADJ,EACIA,SACxBW,EAAYkI,IAAZlI,QAEFoJ,EAAe,SACjBC,EACAC,EACAlK,EACA0C,GAEA,OAAOuH,EAAQ1G,KAAI,SAAC4G,GAChB,IAAM1H,EAAW0H,IAAUD,EAE3B,OACI,cAAC,EAAD,CAEIxH,QAASA,EAAQ4G,KAAK,KAAMa,GAC5B1H,SAAUA,EACVzC,MAAOA,EAJX,SAKKmK,GAJIA,OAUrB,OACI,wBAAO/H,UAAS,oCAAhB,UACI,cAAC,EAAD,CAAgB2E,MAAM,WAAQ/G,MAAM,OAApC,SACKgK,EAAazK,EAAQS,EAAOvB,EAAO2L,MAAOnK,OAG/C,cAAC,EAAD,CAAgB8G,MAAM,0BAAuB/G,MAAM,QAAnD,SACKgK,EACG1K,EAAOiE,KAAI,SAACzD,GAAD,OAAWA,EAAMuK,cAC5BvK,EAAMuK,WACN5L,EAAO6L,KACPvK,OAIR,eAAC,EAAD,CACIgH,MAAM,QACNyC,KAAI,WAAM1J,EAAN,YACJE,MAAM,OAHV,UAII,cAAC,EAAD,CACI+G,MAAM,QACN8C,KAAM,cAAC,EAAD,CAAS1I,SAAS,SACxB2I,OACIlJ,EAAQd,IAAUc,EAAQd,GAAO4E,oBAAU1E,IACrC0D,EAAW9C,EAAQd,GAAO4E,oBAAU1E,IAAQ2E,MAC5C,UAId,cAAC,EAAD,CACIoC,MAAM,QACN8C,KAAM,cAAC,EAAD,CAAU1I,SAAS,SACzB2I,OACIlJ,EAAQd,IAAUc,EAAQd,GAAO4E,oBAAU1E,IACrCY,EAAQd,GAAO4E,oBAAU1E,IAAQJ,OACjC,WC7Bf2K,EApCQ,WAAO,IAAD,EAC2BzB,IAA5CM,EADiB,EACjBA,MAAOxJ,EADU,EACVA,OAAQsJ,EADE,EACFA,MAAOhJ,EADL,EACKA,UAAWM,EADhB,EACgBA,OACjCgK,ECLG,SACXtK,GAED,IADCuK,EACF,uDADyB,IACzB,EACkCjG,qBAAW9F,GAAnCE,EADV,EACUA,QAASC,EADnB,EACmBA,WAoBjB,OAlBAwH,qBAAU,WACN,IAAIqE,OAA4C5L,EAEhD,GAAID,EAQA,OAPIqB,EACAwK,EAAgBC,aAAY,WACxB9L,GAAW,SAACD,GAAD,OAAaA,EAAU,OACnC6L,IACKvK,GAAyB,IAAZtB,GAAiB8L,GACtCE,cAAcF,GAEX,WACCA,GAAeE,cAAcF,MAI1C,CAACxK,EAAWtB,IAER,CAAEA,QAASA,EAAS4L,cAAe9G,EAAW9E,IDnB3BiM,CAAc3K,GAAhCsK,cAER,OACI,uBAAMpI,UAAS,mDAAf,UACI,sBAAKA,UAAU,0EAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,2CACA,uBAAMA,UAAU,mBAAhB,cAAqCoI,QAEzC,sBAAKpI,UAAU,sBAAf,UACI,2CACA,sBAAMA,UAAU,mBAAhB,SAAoCxC,UAI5C,sBAAKwC,UAAU,sCAAf,UACI,cAAC,EAAD,CAAOM,QAASwG,EAAO3E,QAAS/D,IAEhC,cAAC,EAAD,CAAQ4C,IAAK,EAAGK,QAAQ,SAASN,eAAa,EAA9C,SACKiG,OAIT,qBAAKhH,UAAU,oCAAf,SACI,wBACIA,UAAU,4FACVM,QAASwG,EAFb,SAGI,cAAC,EAAD,YEfL4B,G,MAlBa,WAexB,OAAO,mCAdiB,WAIpB,IAHA,IAAMA,EAAmB,GACrBC,EAAI,IAEDA,GAAK,GACRD,EAAUE,KACN,qBAAa5I,UAAS,mBAAc2I,EAAd,YAAZA,IAEdA,IAGJ,OAAOD,EAGDG,OCyBCC,EAhCF,WAAO,IACR1K,EAAWgE,qBAAW7E,GAAtBa,OAER,OACI,eAAC,EAAD,CAAS+B,SAAU,wBAAnB,UACK/B,GAAU,cAAC,EAAD,IAEX,cAAC,EAAD,CAAWwC,SAAS,QAAQD,aAAW,EAAvC,SACI,qBAAKX,UAAU,QAAf,SACI,cAAC,EAAD,CACIyD,iBAAiB,EACjBE,SAAU,CACN,CACIgB,MAAO,UACPG,WACI,qBAAK9E,UAAU,qBAAf,SACI,cAAC,EAAD,OAIZ,CACI2E,MAAO,QACPG,WAAY,cAAC,EAAD,gBCvB5C,SAASiE,IACL,OACI,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,UAQhBC,IAASC,OAAO,cAACF,EAAD,IAAS3F,SAAS8F,eAAe,W","file":"static/js/main.38305213.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport enum ETheme{\r\n    DARK = 'dark',\r\n    LIGHT = 'light'\r\n}\r\n\r\ntype ButtonProps = {\r\n    isActive?: boolean;\r\n    theme: ETheme;\r\n    onClick?: () => void;\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, theme, isActive, onClick }: React.PropsWithChildren<ButtonProps>) => (\r\n    <button\r\n        className={`Button -${theme} ${isActive ? '-active' : ''}`\r\n        }\r\n        onClick={onClick}>\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default Button;\r\n","import React, { createContext, useState } from 'react';\r\n\r\nexport type TimeContextType = {\r\n    seconds: number;\r\n    setSeconds: React.Dispatch<React.SetStateAction<number>> | any;\r\n    minutes: number;\r\n    setMinutes: React.Dispatch<React.SetStateAction<number>> | any;\r\n};\r\n\r\nexport const TimerContext = createContext<TimeContextType>({\r\n    seconds: 0,\r\n    setSeconds: undefined,\r\n    minutes: 0,\r\n    setMinutes: undefined,\r\n});\r\n\r\nexport const TimerProvider = ({ children }) => {\r\n    const [seconds, setSeconds] = useState<number>(0);\r\n    const [minutes, setMinutes] = useState<number>(0);\r\n\r\n    return (\r\n        <TimerContext.Provider value={{ seconds, setSeconds, minutes, setMinutes }}>{children}</TimerContext.Provider>\r\n    );\r\n};\r\n\r\nexport default TimerContext;\r\n","import React, { createContext, useState } from 'react';\r\nimport { CardsFlipped } from '../type/cards';\r\n\r\nexport const LEVELS = [12, 16, 20, 24, 28];\r\nexport const THEMES = [\r\n    'Fruits et Légumes',\r\n    'Médical',\r\n    'Météo',\r\n    'Sommeil',\r\n    'Sport',\r\n];\r\nexport const FLIPPED_RESET: CardsFlipped = { ids: [], imgs: [] };\r\n\r\nexport type GameContext = {\r\n    clicks: number;\r\n    setClicks: React.Dispatch<React.SetStateAction<number>> | any;\r\n    level: number;\r\n    setLevel: React.Dispatch<React.SetStateAction<number>> | any;\r\n    theme: string;\r\n    setTheme: React.Dispatch<React.SetStateAction<string>> | any;\r\n    isPlaying: boolean;\r\n    setIsPlaying: React.Dispatch<React.SetStateAction<boolean>> | any;\r\n    flipped: CardsFlipped;\r\n    setFlipped: React.Dispatch<React.SetStateAction<CardsFlipped>> | any;\r\n    found: string[];\r\n    setFound: React.Dispatch<React.SetStateAction<string[]>> | any;\r\n    isDone: boolean;\r\n    setIsDone: React.Dispatch<React.SetStateAction<boolean>> | any;\r\n};\r\n\r\nexport const GameContext = createContext<GameContext>({\r\n    clicks: 0,\r\n    setClicks: undefined,\r\n    level: LEVELS[0],\r\n    setLevel: undefined,\r\n    theme: THEMES[0],\r\n    setTheme: undefined,\r\n    isPlaying: false,\r\n    setIsPlaying: undefined,\r\n    flipped: FLIPPED_RESET,\r\n    setFlipped: undefined,\r\n    found: [],\r\n    setFound: undefined,\r\n    isDone: false,\r\n    setIsDone: undefined,\r\n});\r\n\r\nexport const GameProvider = ({ children }) => {\r\n    const [clicks, setClicks] = useState<number>(0);\r\n    const [level, setLevel] = useState<number>(LEVELS[0]);\r\n    const [theme, setTheme] = useState<string>(THEMES[0]);\r\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n    const [flipped, setFlipped] = useState<CardsFlipped>(FLIPPED_RESET);\r\n    const [found, setFound] = useState<string[]>([]);\r\n    const [isDone, setIsDone] = useState<boolean>(false);\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value={{\r\n                clicks,\r\n                setClicks,\r\n                isPlaying,\r\n                setIsPlaying,\r\n                level,\r\n                setLevel: () => (level: number) => setLevel(level),\r\n                theme,\r\n                setTheme: () => (theme: string) => setTheme(theme),\r\n                flipped,\r\n                setFlipped,\r\n                found,\r\n                setFound,\r\n                isDone,\r\n                setIsDone,\r\n            }}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    );\r\n};\r\n","import React, { createContext, useState } from 'react';\r\n\r\ntype RecordObject = {\r\n    [level: number]: { clicks: number; time: string };\r\n};\r\n\r\nexport type RecordsContext = {\r\n    records: RecordObject;\r\n    setRecords: React.Dispatch<React.SetStateAction<RecordObject>> | any;\r\n};\r\n\r\nexport const RecordsContext = createContext<RecordsContext>({\r\n    records: {},\r\n    setRecords: undefined,\r\n});\r\n\r\nexport const RecordsProvider = ({ children }) => {\r\n    const [records, setRecords] = useState({});\r\n\r\n    return (\r\n        <RecordsContext.Provider value={{ records, setRecords }}>\r\n            {children}\r\n        </RecordsContext.Provider>\r\n    );\r\n};\r\n","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst StarSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n        <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.svgWidth}\r\n        x=\"0\"\r\n        y=\"0\"\r\n        fill={props.fillColor ? props.fillColor : \"#846700\"}\r\n        enableBackground=\"new 0 0 55.867 55.867\"\r\n        version=\"1.1\"\r\n        viewBox=\"0 0 55.867 55.867\"\r\n        xmlSpace=\"preserve\"\r\n        >\r\n        <path d=\"M55.818 21.578a1.002 1.002 0 00-.808-.681l-18.09-2.629-8.09-16.392a.998.998 0 00-1.792 0l-8.091 16.393-18.09 2.629a1.002 1.002 0 00-.555 1.705l13.091 12.76-3.091 18.018c-.064.375.09.754.397.978a.992.992 0 001.053.076l16.182-8.506 16.18 8.506a1 1 0 001.451-1.054l-3.09-18.017 13.091-12.761c.272-.267.37-.664.252-1.025z\"></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default StarSvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst ClickSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n\r\n        <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.svgWidth}\r\n        height={props.svgHeight && props.svgHeight}\r\n        fill={props.bgFillColor ? props.bgFillColor : '#007d8f'}\r\n        viewBox=\"0 0 25 25\"\r\n        >\r\n        <path d=\"M12.5 25C19.404 25 25 19.404 25 12.5S19.404 0 12.5 0 0 5.596 0 12.5 5.596 25 12.5 25z\"></path>\r\n        <path\r\n            fill={props.fillColor ? props.fillColor : '#fff'}\r\n            d=\"M18.125 16.285l-2.537-2.538 1.81-1.046a.426.426 0 00-.055-.765L9.27 8.716a.426.426 0 00-.554.554l3.22 8.074a.427.427 0 00.765.055l1.045-1.81 2.538 2.537a.426.426 0 00.603 0l1.238-1.238a.427.427 0 000-.603zm-1.54.937l-2.628-2.63a.426.426 0 00-.671.089l-.884 1.53-2.526-6.335 6.334 2.527-1.53.884a.427.427 0 00-.088.67l2.629 2.63-.636.635zM7.373 6.767a.427.427 0 00-.604.604l.948.947a.425.425 0 00.603 0 .427.427 0 000-.603l-.947-.948zM7.693 9.715a.426.426 0 00-.427-.426h-1.34a.426.426 0 100 .853h1.34c.236 0 .427-.191.427-.427zM7.52 11.032l-.948.948a.426.426 0 10.603.603l.948-.948a.426.426 0 10-.603-.603zM9.715 7.692a.426.426 0 00.427-.426v-1.34a.426.426 0 00-.853 0v1.34c0 .235.19.426.426.426zM11.335 8.247c.109 0 .218-.042.301-.125l.948-.948a.426.426 0 00-.603-.603l-.948.948a.426.426 0 00.302.728z\"\r\n        ></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default ClickSvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst ReloadSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n        <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        x={props.svgWidth}\r\n        y=\"0\"\r\n        enableBackground=\"new 0 0 489.533 489.533\"\r\n        version=\"1.1\"\r\n        viewBox=\"0 0 489.533 489.533\"\r\n        xmlSpace=\"preserve\"\r\n        fill={props.fillColor ? props.fillColor : \"#007d8f\"}\r\n        >\r\n        <path d=\"M268.175 488.161c98.2-11 176.9-89.5 188.1-187.7 14.7-128.4-85.1-237.7-210.2-239.1v-57.6c0-3.2-4-4.9-6.7-2.9l-118.6 87.1c-2 1.5-2 4.4 0 5.9l118.6 87.1c2.7 2 6.7.2 6.7-2.9v-57.5c87.9 1.4 158.3 76.2 152.3 165.6-5.1 76.9-67.8 139.3-144.7 144.2-81.5 5.2-150.8-53-163.2-130-2.3-14.3-14.8-24.7-29.2-24.7-17.9 0-31.9 15.9-29.1 33.6 17.4 109.7 118.7 192 236 178.9z\"></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default ReloadSvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst TimeSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n\r\n        <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.svgWidth}\r\n        height={props.svgHeight && props.svgHeight}\r\n        fill={props.bgFillColor ? props.bgFillColor : '#007d8f'}\r\n        viewBox=\"0 0 25 25\"\r\n        >\r\n        <path d=\"M12.5 25C19.404 25 25 19.404 25 12.5S19.404 0 12.5 0 0 5.596 0 12.5 5.596 25 12.5 25z\"></path>\r\n        <path\r\n            fill={props.fillColor ? props.fillColor : '#fff'}\r\n            d=\"M20.506 11.483a.298.298 0 00-.27-.171h-.88c-.56-3.04-3.23-5.35-6.429-5.35A6.546 6.546 0 006.39 12.5a6.546 6.546 0 006.538 6.538 6.563 6.563 0 005.663-3.268.594.594 0 00-1.029-.595 5.37 5.37 0 01-4.634 2.674c-2.95 0-5.35-2.4-5.35-5.349 0-2.95 2.4-5.35 5.35-5.35 2.541 0 4.67 1.782 5.212 4.161h-.874a.298.298 0 00-.229.488l1.486 1.783a.297.297 0 00.457 0l1.486-1.783a.297.297 0 00.04-.317z\"\r\n        ></path>\r\n        <path\r\n            fill={props.fillColor ? props.fillColor : '#fff'}\r\n            d=\"M12.927 7.447a.594.594 0 00-.595.595v3.606a1.039 1.039 0 001.034 1.792l2.068 1.193a.594.594 0 00.594-1.029l-2.07-1.195a1.035 1.035 0 00-.436-.76V8.042a.596.596 0 00-.595-.595zm0 5.498a.446.446 0 110-.892.446.446 0 010 .892z\"\r\n        ></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeSvg;","import React from 'react'\r\n\r\ntype PropsBgImage = {\r\n    imageUrl:string;\r\n\r\n}\r\n\r\nconst BgImage:React.FC<PropsBgImage> = (props: React.PropsWithChildren<PropsBgImage>) => {\r\n    return (\r\n        <div className={`_bg-cover _h-screen _overflow-auto`} style={{backgroundImage: `url(${props.imageUrl})`}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BgImage;","import React from 'react'\r\n\r\ntype ContainerProps = {\r\n    maxWidth:string;\r\n    isCentered?:boolean;\r\n    isCenteredX?:boolean;\r\n\r\n}\r\n\r\nconst Container:React.FC<ContainerProps> = (props: React.PropsWithChildren<ContainerProps>) => {\r\n\r\n    const centered = props.isCentered ? '_m-auto' : '';\r\n    const centeredX = props.isCenteredX ? '_mx-auto' : '';\r\n    \r\n    return(\r\n        <section className={`${centered} ${centeredX}`} style={{maxWidth:props.maxWidth}}>\r\n            {props.children}\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\nexport default Container; ","import React from 'react'\r\n\r\ntype LayoutProps = {\r\n    // mobileLayout?:boolean;\r\n    desktopLayout?:boolean;\r\n    col:number;\r\n    spacing: string;\r\n}\r\n\r\nconst Layout:React.FC<LayoutProps> = (props: React.PropsWithChildren<LayoutProps>) => {\r\n\r\n    const layout = props.desktopLayout ? 'Grid' : '';\r\n\r\n    return(\r\n        <section className={`${layout} _col-${props.col} _flex`}>\r\n            {React.Children.map(props.children, (child) => {\r\n                return (<section className={props.spacing}>{child}</section>)\r\n            })}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Layout;","export default function TimeFormat(seconds: number) {\r\n    let displaySeconds: number;\r\n    let displayMinutes: number;\r\n\r\n    function numberTimeFormat(string, pad, length) {\r\n        return (new Array(length + 1).join(pad) + string).slice(-length);\r\n    }\r\n\r\n    displayMinutes = Math.floor(seconds / 60);\r\n    displaySeconds = seconds - displayMinutes * 60;\r\n\r\n    let finalTime =\r\n        numberTimeFormat(displayMinutes, '0', 2) +\r\n        ':' +\r\n        numberTimeFormat(displaySeconds, '0', 2);\r\n\r\n    return finalTime;\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { snakeCase } from 'lodash';\r\nimport { GameContext } from '../context/GameContext';\r\nimport { RecordsContext } from '../context/RecordsContext';\r\nimport { TimerContext } from '../context/TimerContext';\r\nimport TimeFormat from '../utils/TimeFormat';\r\nimport { ScoreClick } from '../components';\r\nimport { TimeSvg, ClickSvg } from './svg';\r\n\r\ntype ModalProps = {\r\n    onClick: () => void;\r\n    hidden: boolean;\r\n};\r\n\r\nconst Modal: React.FC<ModalProps> = ({ onClick, hidden }) => {\r\n    const { seconds } = useContext(TimerContext);\r\n    const { records } = useContext(RecordsContext);\r\n    const { level, theme, clicks } = useContext(GameContext);\r\n    const themeParsed = snakeCase(theme);\r\n\r\n    return (\r\n        <div\r\n            hidden={hidden}\r\n            className={`${\r\n                hidden ? '_none' : '_flex'\r\n            } _flex-col _justify-center _items-center _absolute _w-3/5 _h-auto _z-10 _px-xs _py-xxs _rounded-small _bg-primary`}>\r\n            <h2 className=\"_text-white _text-lg _mb-xxs\">Partie terminée</h2>\r\n            {records[level] &&\r\n                records[level][themeParsed] &&\r\n                clicks <= records[level][themeParsed].clicks && (\r\n                    <span className=\"_text-golden\">\r\n                        Nouveaux record de clics\r\n                    </span>\r\n                )}\r\n\r\n            {records[level] &&\r\n                records[level][themeParsed] &&\r\n                seconds <= records[level][themeParsed].time && (\r\n                    <span className=\"_text-golden\">\r\n                        Nouveaux record de temps\r\n                    </span>\r\n                )}\r\n            <div className=\"_bg-darkenprimary _rounded-small _w-3/4 _mt-xs\">\r\n                <div className=\"_flex _flex-wrap _justify-around\">\r\n                    <div className=\"_m-xs\">\r\n                        <div className=\"_flex _items-center \">\r\n                            <TimeSvg svgWidth=\"25px\"></TimeSvg>\r\n                            <span className=\"_ml-xs _text-white\">Temps</span>\r\n                        </div>\r\n                        <span className=\"_text-xl _text-white\">\r\n                            {TimeFormat(seconds)}\r\n                        </span>\r\n                        <div className=\"_flex _justify-start\">\r\n                            <ScoreClick\r\n                                isIcon\r\n                                iconPosition=\"left\"\r\n                                count={\r\n                                    records[level] &&\r\n                                    records[level][themeParsed] &&\r\n                                    TimeFormat(records[level][themeParsed].time)\r\n                                }></ScoreClick>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"_m-xs\">\r\n                        <div className=\"_flex _items-center\">\r\n                            <ClickSvg svgWidth=\"25px\"></ClickSvg>\r\n                            <span className=\"_ml-xs _text-white\">Clics</span>\r\n                        </div>\r\n                        <span className=\"_text-xl _text-white\">{clicks}</span>\r\n                        <div className=\"_flex _justify-start\">\r\n                            <ScoreClick\r\n                                isIcon\r\n                                iconPosition=\"left\"\r\n                                count={\r\n                                    records[level] &&\r\n                                    records[level][themeParsed] &&\r\n                                    records[level][themeParsed].clicks\r\n                                }></ScoreClick>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <section className=\"_mt-xs _w-full _flex _justify-end _relative _b-none\">\r\n                <button\r\n                    className=\"_text-primary _bg-white _m-xs _rounded-md _py-xs _px-sm _border-none _cursor-pointer\"\r\n                    onClick={onClick}>\r\n                    <span>Rejouer</span>\r\n                </button>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\ntype TabProps = {\r\n    isActive?: boolean;\r\n    toogleTab?: (event: any) => void;\r\n    borderBottomStyle?: boolean;\r\n};\r\n\r\nconst Tab: React.FC<TabProps> = (props: React.PropsWithChildren<TabProps>) => {\r\n    const tabStyle = () => {\r\n        if (props.borderBottomStyle) {\r\n            return (\r\n                <ul className=\"_w-full _justify-around _flex _cursor-pointer _m-none _px-sm _pt-sm\">\r\n                    <li\r\n                        className={`${\r\n                            props.isActive && props.isActive\r\n                                ? '_border-0 _text-primary _border-b-2 _border-solid _border-primary'\r\n                                : ''\r\n                        } _text-primary _flex _justify-center _w-full _p-xxs`}\r\n                        onClick={props.toogleTab && props.toogleTab}>\r\n                        {props.children}\r\n                    </li>\r\n                </ul>\r\n            );\r\n        } else {\r\n            return (\r\n                <ul className=\"_w-full _p-none _border _border-solid _border-primary _mt-md  _justify-around _hidden lg:_flex _cursor-pointer\">\r\n                    <li\r\n                        className={`${\r\n                            props.isActive && props.isActive ? '_text-white _bg-primary' : ''\r\n                        } _text-primary _flex _justify-center _w-full _p-xxs`}\r\n                        onClick={props.toogleTab && props.toogleTab}>\r\n                        {props.children}\r\n                    </li>\r\n                </ul>\r\n            );\r\n        }\r\n    };\r\n\r\n    return tabStyle();\r\n};\r\n\r\nexport default Tab;\r\n","import React, { useState } from 'react';\r\n\r\nimport { StarSvg } from './svg';\r\n\r\ntype ScoreClickProps = {\r\n    onClick?: (event: any) => void;\r\n    count: number | string;\r\n    isIcon?: boolean;\r\n    iconPosition?: string;\r\n};\r\n\r\n\r\nconst ScoreClick: React.FC<ScoreClickProps> = (props: React.PropsWithChildren<ScoreClickProps>) => {\r\n    \r\n    const [positionIcon, setPositionIcon] = useState<string>()\r\n\r\n    switch (props.iconPosition && props.iconPosition) {\r\n        case \"right\":\r\n            setPositionIcon('_flex-row-reverse')\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className={`${positionIcon} _flex _px-xs _py-xxs _bg-golden _rounded-rounded`} onClick={props.onClick && props.onClick}>\r\n            {props.isIcon && (\r\n            <div className=\"_items-center _flex _mr-xs\">\r\n                <StarSvg svgWidth=\"15px\"></StarSvg>\r\n            </div>\r\n            )}\r\n            <div className=\"_text-center _text-darkengolden\">\r\n                {props.count}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScoreClick;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst getWidth = () =>\r\n    window.innerWidth ||\r\n    document.documentElement.clientWidth ||\r\n    document.body.clientWidth;\r\n\r\nexport default function useCurrentWitdh() {\r\n    // save current window width in the state object\r\n    let [width, setWidth] = useState(getWidth());\r\n\r\n    // in this case useEffect will execute only once because\r\n    // it does not have any dependencies.\r\n    useEffect(() => {\r\n        // timeoutId for debounce mechanism\r\n        let timeoutId: any;\r\n        const resizeListener = () => {\r\n            // prevent execution of previous setTimeout\r\n            clearTimeout(timeoutId);\r\n            // change width from the state object after 150 milliseconds\r\n            timeoutId = setTimeout(() => setWidth(getWidth()), 150);\r\n        };\r\n        // set resize listener\r\n        window.addEventListener('resize', resizeListener);\r\n\r\n        // clean up function\r\n        return () => {\r\n            // remove resize listener\r\n            window.removeEventListener('resize', resizeListener);\r\n        };\r\n    }, []);\r\n\r\n    return width;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Tab } from '.';\r\nimport { useCurrentWidth } from '../logics';\r\n\r\ntype SubContentType = {\r\n    title?: string;\r\n    content: string | React.ReactElement;\r\n};\r\n\r\ntype TabsGroupContent = {\r\n    title: string;\r\n    subcontent: string | SubContentType[] | React.ReactElement;\r\n};\r\n\r\ninterface TabsGroupProps {\r\n    noTabsonDesktop?: boolean;\r\n    borderBottomStyle?: boolean;\r\n    isCard?: boolean;\r\n    contents: TabsGroupContent[];\r\n}\r\n\r\nconst TabsGroup: React.FC<TabsGroupProps> = ({\r\n    noTabsonDesktop,\r\n    borderBottomStyle,\r\n    isCard,\r\n    contents,\r\n}) => {\r\n    const [idActive, setIdActive] = useState<number>(0);\r\n    const [activeTabs, setActiveTabs] = useState<boolean>(false);\r\n\r\n    let width = useCurrentWidth();\r\n    useEffect(() => {\r\n        width > 991 ? setActiveTabs(true) : setActiveTabs(false);\r\n    }, [width]);\r\n\r\n    const setActive = (idx: number): void => setIdActive(idx);\r\n\r\n    const navigation = contents.map(({ title }, idx) => (\r\n        <Tab\r\n            key={idx}\r\n            isActive={idActive === idx}\r\n            borderBottomStyle={borderBottomStyle}\r\n            toogleTab={() => setActive(idx)}>\r\n            <span className=\"_uppercase _text-center\">{title}</span>\r\n        </Tab>\r\n    ));\r\n\r\n    const content = contents.map(({ subcontent }, idx) => {\r\n        let returnedContent = Array.isArray(subcontent)\r\n            ? subcontent.map(({ title, content }, idx) => (\r\n                  <React.Fragment key={idx}>\r\n                      {title && (\r\n                          <h3 className=\"_mb-none _mt-sm _text-primary _text-lg _font-normal\">\r\n                              {title}\r\n                          </h3>\r\n                      )}\r\n                      {content}\r\n                  </React.Fragment>\r\n              ))\r\n            : subcontent;\r\n\r\n        if (noTabsonDesktop) {\r\n            if (activeTabs) {\r\n                return (\r\n                    <div key={idx} className={'_block lg:_hidden _w-full'}>\r\n                        {subcontent}\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div\r\n                        key={idx}\r\n                        className={`${\r\n                            idActive === idx ? '_block _w-full' : '_hidden'\r\n                        }`}>\r\n                        {returnedContent}\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            return (\r\n                <div\r\n                    key={idx}\r\n                    className={`${\r\n                        idActive === idx ? '_block _w-full' : '_hidden'\r\n                    }`}>\r\n                    {returnedContent}\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n\r\n    const background = isCard\r\n        ? '_bg-white _rounded-small _p-xs'\r\n        : '_bg-transparent';\r\n\r\n    return (\r\n        <section className={`${background}`}>\r\n            <nav\r\n                className={`_flex ${\r\n                    activeTabs ? '_block lg:_hidden _mb-xs' : '_block _mb-xs'\r\n                } `}>\r\n                {navigation}\r\n            </nav>\r\n            <section className=\"_flex _w-full _justify-center\">\r\n                {content}\r\n            </section>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default TabsGroup;\r\n","import { useContext, useEffect } from 'react';\r\nimport { snakeCase } from 'lodash';\r\nimport { RecordsContext } from '../context/RecordsContext';\r\nimport { GameContext } from '../context/GameContext';\r\nimport { TimerContext } from '../context/TimerContext';\r\n\r\nconst useRecords = () => {\r\n    const { records, setRecords } = useContext(RecordsContext);\r\n    const { isPlaying, level, theme, clicks } = useContext(GameContext);\r\n    const { seconds } = useContext(TimerContext);\r\n\r\n    const compareRecords = (current: number, newValue: number): number => {\r\n        return current === 0 || (newValue < current && newValue !== 0)\r\n            ? newValue\r\n            : current;\r\n    };\r\n\r\n    useEffect((): void => {\r\n        if (!isPlaying) {\r\n            const themeParsed = snakeCase(theme);\r\n\r\n            if (records[level]) {\r\n                if (records[level][themeParsed]) {\r\n                    setRecords({\r\n                        ...records,\r\n                        [level]: {\r\n                            ...records[level],\r\n                            [themeParsed]: {\r\n                                clicks: compareRecords(\r\n                                    records[level][themeParsed].clicks,\r\n                                    clicks\r\n                                ),\r\n                                time: compareRecords(\r\n                                    records[level][themeParsed].time,\r\n                                    seconds\r\n                                ),\r\n                            },\r\n                        },\r\n                    });\r\n                } else {\r\n                    setRecords({\r\n                        ...records,\r\n                        [level]: {\r\n                            ...records[level],\r\n                            [themeParsed]: {\r\n                                clicks,\r\n                                time: seconds,\r\n                            },\r\n                        },\r\n                    });\r\n                }\r\n            } else {\r\n                setRecords({\r\n                    ...records,\r\n                    [level]: { [themeParsed]: { clicks, time: seconds } },\r\n                });\r\n            }\r\n        }\r\n    }, [isPlaying]);\r\n\r\n    return { records };\r\n};\r\n\r\nexport default useRecords;\r\n","import { snakeCase } from 'lodash';\r\nimport memoryImages from '../assets/images.json';\r\n\r\nconst generateUrlImages = (theme: string, level: number): string[] => {\r\n    const themeParsed = snakeCase(theme);\r\n    const imageNames: string[] = Object.values(memoryImages[themeParsed]);\r\n\r\n    return imageNames\r\n        .filter((image, idx) => idx < level / 2)\r\n        .map((image) => `./assets/img/${themeParsed}/${image}`);\r\n};\r\n\r\nexport default generateUrlImages;\r\n","import { Cards } from '../type/cards';\r\nimport { shuffle } from 'lodash';\r\nimport generateUrlImages from '../utils/generateUrlImages';\r\n\r\nconst generateCards = (theme: string, level: number): Cards[] => {\r\n    const imageUrls = generateUrlImages(theme, level);\r\n    const duplicatedImagesUrls = imageUrls.concat(...imageUrls);\r\n\r\n    return shuffle(\r\n        duplicatedImagesUrls.map((url, idx) => {\r\n            return {\r\n                id: idx,\r\n                img: url,\r\n            };\r\n        })\r\n    );\r\n};\r\n\r\nexport default generateCards;\r\n","import React from 'react';\r\nimport '../styles/components/Card.scss';\r\n\r\ntype CardProps = {\r\n    clicked?: boolean;\r\n    found?: boolean;\r\n    onClick?: (event: any) => void;\r\n    img: string;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = ({ clicked, found, onClick, img }) => {\r\n    return (\r\n        <button\r\n            className={`Card _bg-lightprimary ${clicked ? '-isFlipped' : ''} ${\r\n                found ? '-isWin' : ''\r\n            }`}\r\n            draggable={false}\r\n            disabled={clicked || found}\r\n            onClick={onClick}>\r\n            <img src={img}></img>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport { GameContext, FLIPPED_RESET } from '../context/GameContext';\r\nimport { TimerContext } from '../context/TimerContext';\r\nimport useRecords from './useRecords';\r\nimport { Cards } from '../type/cards';\r\nimport generateCards from '../utils/generateCards';\r\nimport Card from '../components/Card';\r\n\r\nconst useGame = () => {\r\n    const {\r\n        theme,\r\n        level,\r\n        flipped,\r\n        setFlipped,\r\n        clicks,\r\n        setClicks,\r\n        found,\r\n        setFound,\r\n        isPlaying,\r\n        setIsPlaying,\r\n        isDone,\r\n        setIsDone,\r\n    } = useContext(GameContext);\r\n    const { records } = useRecords();\r\n    const { setSeconds } = useContext(TimerContext);\r\n    const [deck, setDeck] = useState<Cards[]>(generateCards(theme, level));\r\n\r\n    const clickCard = (id: number, img: string): void => {\r\n        const { ids, imgs } = flipped;\r\n\r\n        if (clicks === 0) setIsPlaying(true);\r\n\r\n        if (ids.length < 2) {\r\n            setFlipped({ ids: [...ids, id], imgs: [...imgs, img] });\r\n        }\r\n    };\r\n\r\n    const checkPairs = (): void => {\r\n        const { imgs } = flipped;\r\n\r\n        if (imgs[0] === imgs[1]) {\r\n            setFound([...found, imgs[0]]);\r\n            setFlipped(FLIPPED_RESET);\r\n        } else {\r\n            setTimeout(() => {\r\n                setFlipped(FLIPPED_RESET);\r\n            }, 1000);\r\n        }\r\n\r\n        setClicks(clicks + 1);\r\n    };\r\n\r\n    const reset = (): void => {\r\n        setFlipped(FLIPPED_RESET);\r\n        setFound([]);\r\n        setClicks(0);\r\n        setIsDone(false);\r\n        setIsPlaying(false);\r\n        setSeconds(0);\r\n        setDeck(generateCards(theme, level));\r\n    };\r\n\r\n    useEffect((): void => {\r\n        setIsPlaying(false);\r\n    }, [isDone]);\r\n\r\n    useEffect((): void => {\r\n        if (flipped.ids.length === 2) {\r\n            checkPairs();\r\n        }\r\n\r\n        if (found.length === deck.length / 2) {\r\n            setIsDone(true);\r\n        }\r\n    }, [flipped]);\r\n\r\n    useEffect(reset, [theme, level]);\r\n\r\n    const cards: JSX.Element[] = deck.map(\r\n        ({ id, img }): JSX.Element => (\r\n            <Card\r\n                key={id}\r\n                clicked={flipped.ids.includes(id)}\r\n                found={found.includes(img)}\r\n                onClick={clickCard.bind(null, id, img)}\r\n                img={img}\r\n            />\r\n        )\r\n    );\r\n\r\n    return {\r\n        cards,\r\n        clicks,\r\n        reset,\r\n        isDone,\r\n        records,\r\n        isPlaying,\r\n    };\r\n};\r\n\r\nexport default useGame;\r\n","import React from 'react';\r\n\r\ninterface OptionsSectionProps {\r\n    title: string;\r\n    desc?: string;\r\n    theme: 'dark' | 'light';\r\n    onClick?: (event) => void;\r\n}\r\n\r\nconst OptionsSection: React.FC<OptionsSectionProps> = ({\r\n    title,\r\n    desc,\r\n    theme,\r\n    children,\r\n}) => {\r\n    const themeConfig = {\r\n        text: theme === 'light' ? 'primary' : 'white',\r\n        bg: theme === 'light' ? 'white' : 'darkenprimary',\r\n    };\r\n\r\n    return (\r\n        <article\r\n            className={`OptionSection _bg-${themeConfig.bg} _text-${themeConfig.text}`}>\r\n            <h2>{title}</h2>\r\n            {desc && <div className=\"_mt-xxs\">{desc}</div>}\r\n            <div className=\"_flex _justify-center _px-md _py-sm _rounded-small _flex-wrap\">\r\n                {children}\r\n            </div>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default OptionsSection;\r\n","import React from 'react';\r\nimport { ScoreClick } from '../components';\r\n\r\ninterface ScoreIndicatorProps {\r\n    title: string;\r\n    icon: JSX.Element;\r\n    record: string;\r\n}\r\n\r\nconst ScoreIndicator: React.FC<ScoreIndicatorProps> = ({ title, icon, record }) => {\r\n    return (\r\n        <div className=\"_ml-lg\">\r\n            <div className=\"_flex _items-center _mb-sm\">\r\n                {icon}\r\n                <h3 className=\"_m-none _ml-xs\">{title}</h3>\r\n            </div>\r\n            <div className=\"_flex _justify-start\">\r\n                <ScoreClick isIcon iconPosition=\"left\" count={record} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScoreIndicator;\r\n","import React, { useContext } from 'react';\r\nimport { snakeCase } from 'lodash';\r\nimport { GameContext, THEMES, LEVELS } from '../context/GameContext';\r\nimport useGame from '../logics/useGame'\r\nimport TimeFormat from '../utils/TimeFormat';\r\n\r\nimport { Button } from '../components';\r\nimport { ClickSvg, TimeSvg } from '../components/svg';\r\nimport OptionsSection from '../components/OptionsSection';\r\nimport ScoreIndicator from '../components/ScoreIndicator';\r\nimport { ETheme } from './Button';\r\n\r\nconst Options: React.FC = () => {\r\n    const { level, setLevel, theme, setTheme } = useContext(GameContext);\r\n    const { records } = useGame();\r\n\r\n    const renderButton = (\r\n        buttons: string[],\r\n        active: string,\r\n        theme: ETheme,\r\n        onClick: () => void\r\n    ): JSX.Element[] => {\r\n        return buttons.map((label) => {\r\n            const isActive = label === active;\r\n\r\n            return (\r\n                <Button\r\n                    key={label}\r\n                    onClick={onClick.bind(null, label)}\r\n                    isActive={isActive}\r\n                    theme={theme}>\r\n                    {label}\r\n                </Button>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <aside className={`_mr-md lg:_mr-none _my-xl _w-full`}>\r\n            <OptionsSection title=\"Thème\" theme=\"dark\">\r\n                {renderButton(THEMES, theme, ETheme.LIGHT, setTheme())}\r\n            </OptionsSection>\r\n\r\n            <OptionsSection title=\"Niveau de difficulté\" theme=\"light\">\r\n                {renderButton(\r\n                    LEVELS.map((level) => level.toString()),\r\n                    level.toString(),\r\n                    ETheme.DARK,\r\n                    setLevel()\r\n                )}\r\n            </OptionsSection>\r\n\r\n            <OptionsSection\r\n                title=\"Score\"\r\n                desc={`(${level} cartes)`}\r\n                theme=\"dark\">\r\n                <ScoreIndicator\r\n                    title=\"Temps\"\r\n                    icon={<TimeSvg svgWidth=\"25px\" />}\r\n                    record={\r\n                        records[level] && records[level][snakeCase(theme)]\r\n                            ? TimeFormat(records[level][snakeCase(theme)].time)\r\n                            : '00:00'\r\n                    }\r\n                />\r\n\r\n                <ScoreIndicator\r\n                    title=\"Clics\"\r\n                    icon={<ClickSvg svgWidth=\"25px\" />}\r\n                    record={\r\n                        records[level] && records[level][snakeCase(theme)]\r\n                            ? records[level][snakeCase(theme)].clicks\r\n                            : 0\r\n                    }\r\n                />\r\n            </OptionsSection>\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default Options;\r\n","import React from 'react';\r\nimport useGame from '../logics/useGame';\r\nimport { useScoreTimer } from '../logics';\r\nimport { Layout } from '../components';\r\nimport { ReloadSvg } from './svg';\r\nimport Modal from './Modal';\r\n\r\nconst Game: React.FC = () => {\r\n    const { cards, clicks, reset, isPlaying, isDone } = useGame();\r\n    const { secondsFormat } = useScoreTimer(isPlaying);\r\n\r\n    return (\r\n        <main className={`_flex-col _w-full _items-center _relative _my-xl`}>\r\n            <div className=\"_mx-xxs _flex _justify-between _w-full _items-center _text-white _pb-xs\">\r\n                <div className=\"_flex _items-center \">\r\n                    <span>Temps :</span>\r\n                    <span className=\"_text-xl _ml-xxs\"> {secondsFormat}</span>\r\n                </div>\r\n                <div className=\"_flex _items-center\">\r\n                    <span>Clics :</span>\r\n                    <span className=\"_text-xl _ml-xxs\">{clicks}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"_flex _items-center _justify-center\">\r\n                <Modal onClick={reset} hidden={!isDone} />\r\n\r\n                <Layout col={4} spacing=\"_p-xxs\" desktopLayout>\r\n                    {cards}\r\n                </Layout>\r\n            </div>\r\n\r\n            <div className=\"_mt-sm _mb-lg _w-full _text-right\">\r\n                <button\r\n                    className=\"_bg-white _rounded-rounded _w-xxl _h-xxl _border-none _p-xs _cursor-pointer _outline-none\"\r\n                    onClick={reset}>\r\n                    <ReloadSvg></ReloadSvg>\r\n                </button>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import { useEffect, useContext } from 'react';\r\nimport { TimerContext } from '../context/TimerContext';\r\nimport TimeFormat from '../utils/TimeFormat';\r\n\r\nexport default function useScoreTimer(\r\n    isPlaying: boolean,\r\n    milliseconds: number = 1000\r\n) {\r\n    const { seconds, setSeconds } = useContext(TimerContext);\r\n\r\n    useEffect(() => {\r\n        let timerInterval: NodeJS.Timeout | undefined = undefined;\r\n\r\n        if (setSeconds) {\r\n            if (isPlaying) {\r\n                timerInterval = setInterval(() => {\r\n                    setSeconds((seconds) => seconds + 1);\r\n                }, milliseconds);\r\n            } else if (!isPlaying && seconds !== 0 && timerInterval) {\r\n                clearInterval(timerInterval);\r\n            }\r\n            return () => {\r\n                if (timerInterval) clearInterval(timerInterval);\r\n            };\r\n        }\r\n        return;\r\n    }, [isPlaying, seconds]);\r\n\r\n    return { seconds: seconds, secondsFormat: TimeFormat(seconds) };\r\n}\r\n","import React from 'react';\r\nimport '../styles/components/Confettis.scss';\r\n\r\nconst Confettis: React.FC = () => {\r\n    const renderConfettis = (): JSX.Element[] => {\r\n        const Confettis: any[] = [];\r\n        let i = 300;\r\n\r\n        while (i > -1) {\r\n            Confettis.push(\r\n                <div key={i} className={`confetti-${i} _fixed`}></div>\r\n            );\r\n            i--;\r\n        }\r\n\r\n        return Confettis;\r\n    };\r\n\r\n    return <>{renderConfettis()}</>;\r\n};\r\n\r\nexport default Confettis;\r\n","import React, { useContext } from 'react';\r\nimport {\r\n    Container,\r\n    BgImage,\r\n    TabsGroup,\r\n} from './components';\r\nimport { GameContext } from './context/GameContext';\r\nimport Options from './components/Options';\r\nimport Game from './components/Game';\r\nimport Confettis from './components/Confettis';\r\n\r\nconst Main = () => {\r\n    const { isDone } = useContext(GameContext);\r\n\r\n    return (\r\n        <BgImage imageUrl={'./assets/img/lake.jpg'}>\r\n            {isDone && <Confettis />}\r\n\r\n            <Container maxWidth=\"991px\" isCenteredX>\r\n                <div className=\"_p-sm\">\r\n                    <TabsGroup\r\n                        noTabsonDesktop={true}\r\n                        contents={[\r\n                            {\r\n                                title: 'Options',\r\n                                subcontent: (\r\n                                    <div className=\"lg:_mr-none _mr-sm\">\r\n                                        <Options /> \r\n                                    </div>\r\n                                ),\r\n                            },\r\n                            {\r\n                                title: 'Jouer',\r\n                                subcontent: <Game />,\r\n                            },\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </Container>\r\n        </BgImage>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport { TimerProvider } from './context/TimerContext';\r\nimport { GameProvider } from './context/GameContext';\r\nimport { RecordsProvider } from './context/RecordsContext';\r\n\r\nimport './styles/index.scss';\r\nimport Main from './Main';\r\n\r\nfunction App() {\r\n    return (\r\n        <TimerProvider>\r\n            <RecordsProvider>\r\n                <GameProvider>\r\n                    <Main />\r\n                </GameProvider>\r\n            </RecordsProvider>\r\n        </TimerProvider>\r\n    );\r\n}\r\n\r\n// const render = () => {\r\n    ReactDom.render(<App />, document.getElementById('root'));\r\n// };\r\n\r\n// if (module.hot) {\r\n//     module.hot.accept('./Main', () => {\r\n//         render();\r\n//     });\r\n// }\r\n\r\n// render();\r\n"],"sourceRoot":""}